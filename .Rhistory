svc<-WOCSCM(A, 1, 2, 1, 3, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 2, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 2, 2, 0.5, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 2, 2, 10, 100, "Gaussian", c(0.5))
svc
#Page 160 - Small
library(mlRFinance)
#Pequeno exemplo
A<-matrix(c(1,2,5,6,
5,5,2,1,
8,1,1,7),nrow=4,ncol=3)
svc<-WOCSCM(A, 1, 2, 1, 100, "Gaussian", c(0.5))
svc
library(mlRFinance)
#Page 160 - Small
library(mlRFinance)
#Pequeno exemplo
A<-matrix(c(1,2,5,6,
5,5,2,1,
8,1,1,7),nrow=4,ncol=3)
svc<-WOCSCM(A, 1, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 1, 2, 1, 100, "Gaussian", c(0.5))
svc
library(mlRFinance)
library(mlRFinance)
svc<-WOCSCM(df, 1, 2, 1, 100, "Gaussian", c(0.5))
svc
#Page 160 - Small
library(mlRFinance)
#Pequeno exemplo
A<-matrix(c(1,2,5,6,
5,5,2,1,
8,1,1,7),nrow=4,ncol=3)
svc<-WOCSCM(A, 1, 2, 1, 100, "Gaussian", c(0.5))
svc
data(iris)
df<-as.matrix(iris[,1:4])
#WOCSCM(X, C, k, sigma, inter, kernel, parms)
svc<-WOCSCM(df, 1, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df,  nrow(iris), 2, 1, 1, "Polynomial", c(1,2))
svc<-WOCSCM(df,  nrow(iris), 2, 1, 100, "Polynomial", c(1,2))
svc
svc<-WOCSCM(df,  1, 2, 1, 100, "Polynomial", c(1,2))
svc
svc<-WOCSCM(df,  3, 2, 1, 100, "Polynomial", c(1,2))
svc
svc<-WOCSCM(df, 1, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 100, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 1, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 1, 2, 100, 100, "Polynomial", c(1,2))
svc
svc<-WOCSCM(df, 1, 2, 0.01, 100, "Polynomial", c(1,2))
svc
svc<-WOCSCM(df, 1, 2, 2, 100, "Polynomial", c(1,2))
svc
svc<-WOCSCM(df, 1, 2, 1, 100, "Polynomial", c(1,2))
svc
svc<-WOCSCM(df, 1, 2, 1, 100, "Polynomial", c(1,2))
svc
svc<-WOCSCM(df, 100, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 1, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 0.5, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 0.05, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 0.05, 2, 100, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 0.05, 2, 0.001, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 0.05, 2, 0.01, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 0.05, 2, 1, 100, "Gaussian", c(0.5))
svc
svc<-WOCSCM(df, 0.05, 2, 1.2, 100, "Gaussian", c(0.5))
svc
head(iris)
teste<-cbind(iris$Species,svc$Zmat)
View(teste)
teste[,2:3]<-round(teste[,2:3])
View(teste)
table(teste[,1]~teste[,2])
table(teste[,1],teste[,2])
gamma
help(gamma)
library(mlRFinance)
library(mlRFinance)
library(mlRFinance)
library(mlRFinance)
library(mlRFinance)
library(mlRFinance)
#Page 160 - Small
library(mlRFinance)
A<-matrix(c(1,2,5,6),nrow=4,ncol=1)
d<-c(-1,-1,+1,-1)
svm2<- CSVRL1(d, A, 50,0.5, "Polynomial", c(2,1))
svm2
Apred<-matrix(c(1.8,3,6,5),nrow=4,ncol=1)
PredictedCSVRL1(svm2, A, A, "Polynomial", c(2,1))
lambdas<-c(rep(-0.5,length(d)),rep(0.5,length(d)))
objectiveCSVRL1(lambdas, d, A, 0.5,"Polynomial", c(2,1))
library(mlRFinance)
#Page 160 - Small
library(mlRFinance)
A<-matrix(c(1,2,5,6),nrow=4,ncol=1)
d<-c(-1,-1,+1,-1)
svm2<- CSVRL1(d, A, 50,0.5, "Polynomial", c(2,1))
svm2
Apred<-matrix(c(1.8,3,6,5),nrow=4,ncol=1)
PredictedCSVRL1(svm2, A, A, "Polynomial", c(2,1))
lambdas<-c(rep(-0.5,length(d)),rep(0.5,length(d)))
objectiveCSVRL1(lambdas, d, A, 0.5,"Polynomial", c(2,1))
library(mlRFinance)
#Page 160 - Small
library(mlRFinance)
A<-matrix(c(1,2,5,6),nrow=4,ncol=1)
d<-c(-1,-1,+1,-1)
svm2<- CSVRL1(d, A, 50,0.5, "Polynomial", c(2,1))
svm2
Apred<-matrix(c(1.8,3,6,5),nrow=4,ncol=1)
PredictedCSVRL1(svm2, A, A, "Polynomial", c(2,1))
lambdas<-c(rep(-0.5,length(d)),rep(0.5,length(d)))
objectiveCSVRL1(lambdas, d, A, 0.5,"Polynomial", c(2,1))
library(mlRFinance)
#Page 160 - Small
library(mlRFinance)
A<-matrix(c(1,2,5,6),nrow=4,ncol=1)
d<-c(-1,-1,+1,-1)
svm2<- CSVRL1(d, A, 50,0.5, "Polynomial", c(2,1))
svm2
Apred<-matrix(c(1.8,3,6,5),nrow=4,ncol=1)
PredictedCSVRL1(svm2, A, A, "Polynomial", c(2,1))
lambdas<-c(rep(-0.5,length(d)),rep(0.5,length(d)))
objectiveCSVRL1(lambdas, d, A, 0.5,"Polynomial", c(2,1))
library(mlRFinance)
#Page 160 - Small
library(mlRFinance)
A<-matrix(c(1,2,5,6),nrow=4,ncol=1)
d<-c(-1,-1,+1,-1)
svm2<- CSVRL1(d, A, 50,0.5, "Polynomial", c(2,1))
svm2
Apred<-matrix(c(1.8,3,6,5),nrow=4,ncol=1)
PredictedCSVRL1(svm2, A, A, "Polynomial", c(2,1))
lambdas<-c(rep(-0.5,length(d)),rep(0.5,length(d)))
objectiveCSVRL1(lambdas, d, A, 0.5,"Polynomial", c(2,1))
library(mlRFinance)
#Page 160 - Small
library(mlRFinance)
A<-matrix(c(1,2,5,6),nrow=4,ncol=1)
d<-c(-1,-1,+1,-1)
svm2<- CSVRL1(d, A, 50,0.5, "Polynomial", c(2,1))
svm2
Apred<-matrix(c(1.8,3,6,5),nrow=4,ncol=1)
PredictedCSVRL1(svm2, A, A, "Polynomial", c(2,1))
lambdas<-c(rep(-0.5,length(d)),rep(0.5,length(d)))
objectiveCSVRL1(lambdas, d, A, 0.5,"Polynomial", c(2,1))
library(mlRFinance)
#Page 160 - Small
library(mlRFinance)
A<-matrix(c(1,2,5,6),nrow=4,ncol=1)
d<-c(-1,-1,+1,-1)
svm2<- CSVRL1(d, A, 50,0.5, "Polynomial", c(2,1))
svm2
Apred<-matrix(c(1.8,3,6,5),nrow=4,ncol=1)
PredictedCSVRL1(svm2, A, A, "Polynomial", c(2,1))
lambdas<-c(rep(-0.5,length(d)),rep(0.5,length(d)))
objectiveCSVRL1(lambdas, d, A, 0.5,"Polynomial", c(2,1))
minimumCSVRL1(d, A, 0.5,"Polynomial", c(2,1))
minimumCSVRL1(y, X, 0.5,"Polynomial", c(2,1))
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5,"Polynomial", c(2,1))
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
minimumCSVRL1(y, X, 0.5,"Polynomial", c(2,1))
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5,"Polynomial", c(2,1))
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5,"Polynomial", c(2,1))
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5,"Polynomial", c(2,1))
minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
library(mlRFinance)
#Habilita o pacote quantmod
library(quantmod)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados do ativo PETR4 e PETR3
getSymbols("^BVSP", src="yahoo",from=startDate,to=endDate)
#Calcula o log-retorno
retorno<-na.omit(diff(log(Cl(BVSP))))
train <- as.numeric(retorno[1:180])
valid <- as.numeric(retorno[181:216])
#Cria os objetos
y<-train[2:length(train)]
X<-matrix(train[1:(length(train)-1)],ncol=1)
#Faz analise de sensibilidade
Q<-minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
Q2<-Matrix::nearPD(Q)
teste<-eigen(Q)
summary(y)
summary(X)
solve(Q)
det(Q)
diag(Q)
Q<-minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
summary(Q)
library(mlRFinance)
Q<-minimumCSVRL1(y, X, 0.5, "Gaussian", 1)
Q2<-Matrix::nearPD(Q)
teste<-eigen(Q)
teste
sum((Q2-Q)^2)
sum((Q2-Q))
sum(Q2$mat-Q)
solve(Q)
solve(Q2)
solve(Q2$mat)
Matrix::nearPD
D_S[]<-0
D_S<-A
D_S[]<-0
library(PresenceAbsence)
help(SPDATA)
Matrix::nearPD()
Matrix::nearPD
Q<-matrix(seq(1,9),ncol=3,nrow=3)
Q[,2,drop=F]
View(Q)
if(true)
x<-23
y<-42
z<-34
if(T)
x<-23
y<-42
z<-34
if(F)
x<-12
y<-42
z<-34
Q[,T,drop=FALSE]
Q[,F,drop=FALSE]
p <- c(1,3,4) > 2
p
!any(p)
Q[,p,drop=FALSE]
View(Q)
tcrossprod
help(tcrossprod)
Q0<-Q[,p,drop=FALSE]
rep(c(1,4,3),each=5)
help(nearPD)
help(nearPD)
Rcpp::sourceCpp('C:/Users/p.albuquerque/Desktop/teste.cpp')
timesTwo(42)
return x * 2;
Rcpp::sourceCpp('C:/Users/p.albuquerque/Desktop/teste.cpp')
timesTwo(c(42,45,32,12))
file.exists("~/.ssh/id_rsa.pub")
library(mlRFinance)
devtools::install_github("PedroBSB/mlRFinance", auth_token = "0c468b0e44dd1753f80ba8fe7e73d5187b98563a")
file.exists("~/.ssh/id_rsa.pub")
library(mlRFinance)
